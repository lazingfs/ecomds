# Generated by Django

from django.db import migrations

def corrigir_precos_unitarios(apps, schema_editor):
    """
    Busca todos os ItemPedido onde o preco_unitario é nulo
    e o preenche com o preço atual do Produto correspondente.
    """
    ItemPedido = apps.get_model('loja', 'ItemPedido')
    
    # Filtra apenas os itens que precisam ser corrigidos
    itens_para_corrigir = ItemPedido.objects.filter(preco_unitario__isnull=True)
    
    print(f"\nEncontrados {itens_para_corrigir.count()} itens de pedido para corrigir.")

    for item in itens_para_corrigir:
        if item.produto:
            # Pega o preço do produto e atribui ao item do pedido
            item.preco_unitario = item.produto.preco
            item.save()
            print(f"  - Corrigido item do produto '{item.produto.nome}' (Pedido #{item.pedido.id})")
        else:
            # Caso raro onde o produto foi deletado, apenas definimos como 0 para evitar erros
            item.preco_unitario = 0
            item.save()
            print(f"  - Corrigido item sem produto (Pedido #{item.pedido.id}) com preço 0.")


class Migration(migrations.Migration):

    dependencies = [
        ('loja', '0005_alter_itempedido_quantidade_and_more'),  # SUBSTITUA '00XX_previous_migration' PELO NOME DA SUA ÚLTIMA MIGRAÇÃO REAL
    ]

    operations = [
        migrations.RunPython(corrigir_precos_unitarios),
    ]